/**
 *
 * @author Jakob Pupke
 */
package bigint;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author jacke
 */
public class BigIntTest {
    
    public BigIntTest() {
    }
    
    @BeforeClass
    public static void setUpClass() {
    }
    
    @AfterClass
    public static void tearDownClass() {
    }

    /**
     * Test of toString method, of class BigInt.
     */
    @Test
    public void testToString() {
        String num = "9021484789375297489789478923565365828490";
        BigInt instance = new BigInt(num);
        
        String result = instance.toString();
        assertEquals(num, result);
        
    }
    
    @Test
    public void testExtendWithZeros() {
        BigInt x = new BigInt(1234);
        x.extendWithZeros(10);
        assertEquals("0000001234", x.toString());
    }
    
    @Test
    public void testKaratsuba() {
        BigInt x = new BigInt(1234);
        BigInt y = new BigInt(4321);
        BigInt c = x.karatsuba(y);
        assertEquals("5332114", c.toString());
        
        x = new BigInt(88888888);
        y = new BigInt(88888888);
        c = x.karatsuba(y);
        assertEquals("7901234409876544", c.toString());
        
        x = new BigInt(88888888);
        y = new BigInt(4444);
        c = x.karatsuba(y);
        assertEquals("395022218272", c.toString());
        
        x = new BigInt("11907858797062763600287");
        y = new BigInt("609258644980293364");
        c = x.karatsuba(y);
        assertEquals("7254965915315125492213065479690094595468", c.toString());
        
        x = new BigInt("275037643193238187969754635193967098168234");
        y = new BigInt("2789096463851958435408110961618870154822");
        c = x.karatsuba(y);
        assertEquals("767106518056437295756217290247277073192355873708821128125451865456623048182324348", c.toString());
        
        x = new BigInt("1161773002875530970475777318025858646972144071496504896369373542143925303581117880759012959257904240775262220379722624450259881493669369582103579798349025470539165815324808002121323272794820292319");
        y = new BigInt("225461820030056738863111393842522918646434913785508706785223950926908750687391732247955346997611273062097910735906920001391888212823475570974758772091099074195005291818882084891523756343366089648730273588212737213447787531009284731961359");
        c = x.karatsuba(y);
        assertEquals("261935455690101553835477616867817994532638410954790388135216273370964797534529434698867203365573514463519154693261215921734833778385249158204506983012447297807770027390554349437402400522684075354375364637327097895729354331681217995385212672256647156206152245528450577573707698166970321064030601231932418788031240573661839756846437852390064206259528820740283846599580492480243484529507512536112300154607427296516019207278922592501521", c.toString());
        
        x = new BigInt("12381284327574325348658436984569459796578485732473274713245743584684564596457645765800807689679896589709876087698768650056759675967965974687945697846848653827347237584368548796579659765979659796579457945979659876598956794569348582875287872873528385834969747965785688583284293492395943694399549");
        y = new BigInt("237574374368436858695796093402992985843688435983285843884369864576834587776216247235843586976457650700958324883584354396945097457004392393219893295093460306450630460430634096934939858285838636457857885387583838468384683486386994597497939495283883483846379759474597865650706435014929358868436845945794597");
        c = x.karatsuba(y);
        assertEquals("2941475878001202787450836365794924592932312176731678332827309067120466107908983335796508746014935869561589884784832594884262627650423161354289059575290678099122590965894330511866154438442233395072712785840660137532550529513399033278658701093486558547404403964828106691758261547875571260572838199921235379290722193802999416226462557194009506350521366528408483562442876164076971655425232719656186535090524667471962118474932664453614901581587019042541150700955706716936891981739391277697439467023493740274142948856471036939203177146104174387075293115770199443171017144582594891874633862217603436753", c.toString());
    }
    
    @Test
    public void testAdd() {
        BigInt x = new BigInt("3553759357973593");
        BigInt y = new BigInt("903590835045676745");
        String expResult = "907144594403650338";
        BigInt c = x.add(y);
        assertEquals(expResult, c.toString());
        
        BigInt d = (new BigInt()).add(new BigInt("123"));
        assertEquals("123", d.toString());
        
        assertEquals("3553759357973594", x.add(new BigInt("1")).toString());
        
        x = new BigInt("1238128432757432534865843698456945979657848573247327471324574358468456459645764576580080768967989658970987608769876865005675967596796597468794569784684865382734723758436854879657965976597965979657945794597965987659895679456934858287528787287352838583496974796578568858328429349239594369439954964578574597569385823873737472742735486875989796598765985999358532737473214723875824383868368544");
        y = new BigInt("237574374368436858695796093402992985843688435983285843884369864576834587776216247235843586976457650700958324883584354396945097457004392393219893295093460306450630460430634096934939858285838636457857885387583838468384683486386994597497939495283883483846379759474597865650706435014929358868436845945794597596834852838423848235884326943963969439694395823852838528852843584386934945748328428731872");
        c = x.add(y);
        
        assertEquals("237575612496869616128330959246691442789668093831859091211841189151193056232675893000420167057226618690617295871193124273810103132971989189817362089663244991316013195154392533789819516251815234423837543333378436434372343382066451532356227024071170836684963256449394444219564763444278598462806285900759176171432422224247721973357069679450845429490994589838837887385581057601658821572712297100416", c.toString());
        
        x = new BigInt();
        y = new BigInt(1);
        c = x.add(y);
        
        assertEquals("1", c.toString());
    }
    
    @Test
    public void testAddNegs() {
        BigInt a = new BigInt("-3553759357973593");
        BigInt b = new BigInt("-903590835045676745");
        String expResult = "-907144594403650338";
        BigInt c = a.add(b);
        assertEquals(expResult, c.toString());
        
        BigInt d = (new BigInt()).add(new BigInt("-1234"));
        assertEquals("-1234", d.toString());
        
        assertEquals("-3553759357973592", a.add(new BigInt("1")).toString());
        
        assertEquals("0", a.add(new BigInt("3553759357973593")).toString());
        
        assertEquals("100", a.add(new BigInt("3553759357973693")).toString());
    }
    
    @Test
    public void testSub() {
        BigInt a = new BigInt(123);
        BigInt b = new BigInt(103);
        String expResult = "20";
        BigInt c = a.sub(b);
        assertEquals(expResult, c.toString());
        
        a = new BigInt();
        b = new BigInt();
        c = a.sub(b);
        assertEquals("0", c.toString());
        
        a = new BigInt();
        b = new BigInt(1);
        c = a.sub(b);
        
        assertEquals("-1", c.toString());
        
        a = new BigInt(474586);
        b = new BigInt(1289);
        expResult = "473297";
        c = a.sub(b);
        assertEquals(expResult, c.toString());
        
        a = new BigInt(899456);
        b = new BigInt(897988);
        expResult = "1468";
        c = a.sub(b);
        assertEquals(expResult, c.toString());
        
        a = new BigInt(100);
        b = new BigInt(257);
        c = a.sub(b);
        assertEquals("-157", c.toString());
        
        a = new BigInt("-65874");
        b = new BigInt("-9878845");
        c = a.sub(b);
        assertEquals("9812971", c.toString());
        
        a = new BigInt(10000);
        b = new BigInt(49);
        c = a.sub(b);
        assertEquals("9951", c.toString());
    }
    
    @Test
    public void testMul() {
        BigInt a = new BigInt(111);
        BigInt b = new BigInt(5);
        String expResult = "555";
        BigInt c = a.mul(b);
        assertEquals(expResult, c.toString());
        
        a = new BigInt(434043568);
        b = new BigInt(999);
        expResult = "433609524432";
        c = a.mul(b);
        assertEquals(expResult, c.toString());
        
        a = new BigInt();
        b = new BigInt();
        
        assertEquals(a.mul(b).toString(), "0");
        
        assertEquals("0", a.mul(new BigInt("21313435334564566353")).toString());
        
        a = new BigInt(99);
        b = new BigInt(32);
        assertEquals("3168", a.mul(b).toString());
        
        a = new BigInt(123456);
        b = new BigInt(1000000);
        
        assertEquals("123456000000", a.mul(b).toString());
    }

    @Test
    public void testIsEven() {
        BigInt instance = new BigInt();
        assertTrue(instance.isEven());
        
        instance = new BigInt(1);
        assertFalse(instance.isEven());
        
        instance = new BigInt(123154356841L);
        assertFalse(instance.isEven());
        
        instance = new BigInt("-123154356841");
        assertFalse(instance.isEven());
    }

    @Test
    public void testEquals() {
        BigInt a = new BigInt();
        BigInt b = new BigInt();
        assertTrue(a.equals(b));
        
        a = new BigInt(123);
        b = new BigInt(123);
        
        assertTrue(a.equals(b));
        
        b = new BigInt(12315364123L);
        
        assertFalse(a.equals(b));
        
        a = new BigInt(12345);
        b = new BigInt(10);
        assertTrue(a.equals(b.add(new BigInt(12335))));
        assertFalse(a.equals(b.add(new BigInt(12334))));
        
        a = new BigInt("90345723904294274093482048907897782615276532482347588650870");
        b = new BigInt("90345723904294274093482048907897782615276532482347588650870");
        assertTrue(a.equals(b));
        
        a = new BigInt("-90345723904294274093482048907897782615276532482347588650870");
        b = new BigInt("-90345723904294274093482048907897782615276532482347588650870");
        assertTrue(a.equals(b));
        
        a = new BigInt("-90345723904294274093482048907897782615276532482347588650870");
        b = new BigInt("90345723904294274093482048907897782615276532482347588650870");
        assertFalse(a.equals(b));
    }
    
    @Test
    public void testGt() {
        BigInt a = new BigInt();
        BigInt b = new BigInt();
        assertFalse(a.gt(b));
        
        a = new BigInt(567);
        b = new BigInt(566);
        assertTrue(a.gt(b));
        
        a = new BigInt(567);
        b = new BigInt(5668);
        assertFalse(a.gt(b));
        
        a = new BigInt(567);
        b = new BigInt(567);
        assertFalse(a.gt(b));
        
        a = new BigInt("-2344324");
        b = new BigInt(999);
        assertFalse(a.gt(b));
        
        a = new BigInt("-2344334");
        b = new BigInt("-2344324");
        assertFalse(a.gt(b));
        
        a = new BigInt("-2344324");
        b = new BigInt("-2344324");
        assertFalse(a.gt(b));
    }
    
    @Test
    public void testLt() {
        BigInt a = new BigInt();
        BigInt b = new BigInt();
        assertFalse(a.lt(b));
        
        a = new BigInt(567);
        b = new BigInt(566);
        assertFalse(a.lt(b));
        
        a = new BigInt(567);
        b = new BigInt(5668);
        assertTrue(a.lt(b));
        
        a = new BigInt(567);
        b = new BigInt(567);
        assertFalse(a.lt(b));
        
        a = new BigInt(56788);
        b = new BigInt("-56788");
        assertFalse(a.lt(b));
        
        a = new BigInt("-567");
        b = new BigInt();
        assertTrue(a.lt(b));
        
        a = new BigInt(467567);
        b = new BigInt(522432);
        assertTrue(a.lt(b));
        
        a = new BigInt("-467567");
        b = new BigInt("-522432");
        assertFalse(a.lt(b));
    }
    
    
    @Test
    public void testResize() {
        int[] a = new int[5];
        a[0] = 0;
        a[1] = 0;
        a[2] = 1;
        a[3] = 2;
        a[4] = 3;
        BigInt x = new BigInt(a);
        assertEquals("123", x.resize().toString());
    }
    
    @Test
    public void testShiftLeftBy() {
        BigInt a = new BigInt(567);
        BigInt b = a.shiftLeftBy(4);
        assertEquals("5670000", b.toString());
    }
    
    @Test
    public void testPow() {
        BigInt a = new BigInt(8);
        BigInt b = a.pow(23);
        assertEquals("590295810358705651712", b.toString());
        
        a = new BigInt(55);
        b = a.pow(0);
        assertEquals("1", b.toString());
        
        a = new BigInt(587867645);
        b = a.pow(1);
        assertEquals("587867645", b.toString());
        
        a = new BigInt(58786764543534L);
        b = a.pow(1);
        assertEquals("58786764543534", b.toString());
        
//        a = new BigInt(52);
//        b = a.pow(98);
//        assertEquals("1473423784866237624670098483797258933673033687275246807716133162119807965143050991653453567510224775014037060129581571439829382568929663552438113089945991643900772614144", b.toString());
//        
//        a = new BigInt(38543);
//        b = a.pow(4838);
//        assertEquals(b.toString(), "");
    }
    
    @Test
    public void testMod() {
        BigInt a = new BigInt(9);
        BigInt b = new BigInt(2);
        assertEquals("1", a.mod(b).toString());
        
        a = new BigInt(658448);
        b = new BigInt(178);
        assertEquals("26", a.mod(b).toString());
        
        a = new BigInt("237574374368436858695796093402992985843688435983285843884369864576834587776216247235843586976457650700958324883584354396945097457004392393219893295093460306450630460430634096934939858285838636457857885387583838468384683486386994597497939495283883483846379759474597865650706435014929358868436845945794597596834852838423848235884326943963969439694395823852838528852843584386934945748328428731872");
        b = new BigInt("1238128432757432534865843698456945979657848573247327471324574358468456459645764576580080768967989658970987608769876865005675967596796597468794569784684865382734723758436854879657965976597965979657945794597965987659895679456934858287528787287352838583496974796578568858328429349239594369439954964578574597569385823873737472742735486875989796598765985999358532737473214723875824383868368544");
        assertEquals("1052562507946473203138699375734320960793900015401359139212099548693842927294517081108946110826947946251525211611662790987118563464474310122450238343651946108930938011945771289688730244326315111588374331526790216240616510877054428628261799333463606396738532305494545789083053486751665928847387493125240623531567707228228535498986712171278526579664309923908653745669954917887147282004140608", a.div(b).rest.toString());
        
        a = new BigInt("8435238458243858");
        b = new BigInt("-10");
        assertEquals("-843523845824385", a.div(b).quotient.toString());
        
        a = new BigInt("31745");
        b = new BigInt("20814");
        assertEquals("10931", a.div(b).rest.toString());
    }
    
    @Test
    public void testPowMod() {
        BigInt a = new BigInt(2);
        int e = 588;
        BigInt m = new BigInt(57687);
        assertEquals("25348", a.powMod(e, m).toString());
        
        a = new BigInt(38848);
        e = 49838;
        m = new BigInt(8456765);
        assertEquals("4018389", a.powMod(e, m).toString());
    }
    
    @Test
    public void testGcd() {
        BigInt a = new BigInt("245096536056936046682799600");
        BigInt b = new BigInt("543506203945812017181853335600");
        assertEquals("4176646315657200", a.gcd(b).toString());
        
        a = new BigInt("76979890");
        b = new BigInt("945430");
        assertEquals("10", a.gcd(b).toString());
        
        a = new BigInt("75");
        b = new BigInt("-20");
        assertEquals("5", a.gcd(b).toString());
        
        a = new BigInt("-75");
        b = new BigInt("20");
        assertEquals("5", a.gcd(b).toString());
        
        a = new BigInt("457658");
        b = new BigInt();
        assertEquals("457658", a.gcd(b).toString());
        
        a = new BigInt("9659658865765");
        b = new BigInt("253254353464566");
        assertEquals("1", a.gcd(b).toString());
        
//        a = new BigInt("457658332");
//        b = new BigInt("2");
//        assertEquals("2", a.gcd(b).toString());
        a = new BigInt("37346456345735676576532454364574574568651311243324325132543464656451");
        b = new BigInt("843843856945931838738388543854388483737554886486859795645995964384388437532737173737735858832853853228383287327373271");
        assertEquals("1", a.gcd(b).toString());
        
        a = new BigInt("245096536056936046682799600");
        b = new BigInt("543506203945812017181853335600");
        assertEquals("4176646315657200", a.gcd(b).toString());
    }
    
    @Test
    public void testEgcd() {
        BigInt x = new BigInt("99");
        BigInt y = new BigInt("78");
        GcdLinComb l = x.egcd(y);
        
        assertEquals("3", l.gcd.toString());
        assertEquals("-11", l.u.toString());
        assertEquals("14", l.v.toString());
        
        x = new BigInt("123701");
        y = new BigInt("97987886");
        l = x.egcd(y);
        
        assertEquals("1", l.gcd.toString());
        assertEquals("12085603", l.u.toString());
        assertEquals("-15257", l.v.toString());
        
        x = new BigInt("9659658865765");
        y = new BigInt("253254353464566");
        l = x.egcd(y);
        
        assertEquals("1", l.gcd.toString());
        assertEquals("78054515421037", l.u.toString());
        assertEquals("-2977164978944", l.v.toString());
        
        x = new BigInt("38684564568864386436");
        y = new BigInt("25325435346475661");
        l = x.egcd(y);
        
        assertEquals("1", l.gcd.toString());
        assertEquals("124906052573443", l.u.toString());
        assertEquals("-190793808268798327", l.v.toString());
        
        x = new BigInt("37346456345735676576532454364574574568651311243324325132543464656451");
        y = new BigInt("843843856945931838738388543854388483737554886486859795645995964384388437532737173737735858832853853228383287327373271");
        
        l = x.egcd(y);
        assertEquals("1", l.gcd.toString());
        assertEquals("286422626281851984584144037425111097861290685744530351682868848312949003301879404669212646659808417376222701190299513", l.u.toString());
        assertEquals("-12676361889485837430252314661643787671980085174372220702747469528422", l.v.toString());
        
        x = new BigInt("3734645634573567657653245436457457456865131");
        y = new BigInt("6585684354564575676587687687697657686757546464545343431");
        
        l = x.egcd(y);
        assertEquals("1", l.gcd.toString());
        assertEquals("-898404493543403350987229695886807999528328550372311725", l.u.toString());
        assertEquals("509472097241894736768214105866071836443696", l.v.toString());
        
        x = new BigInt("373464563457356765765");
        y = new BigInt("6585684354564575676587687687697657");
        
        l = x.egcd(y);
        assertEquals("1", l.gcd.toString());
        assertEquals("-568931575791208729935848069175400", l.u.toString());
        assertEquals("32263280647925627793", l.v.toString());
    }
    
    @Test
    public void testDiv() {
        BigInt a = new BigInt(28382);
        BigInt b = new BigInt(23);
        BigInt c = a.div(b).quotient;
        assertEquals("1234", c.toString());
        
        a = new BigInt(99);
        b = new BigInt(78);
        c = a.div(b).rest;
        assertEquals(c.toString(), "21");
        
        a = new BigInt(5675745);
        b = new BigInt(1000);
        c = a.div(b).quotient;
        assertEquals(c.toString(), "5675");
        
        a = new BigInt("1238128432757432534865843698456945979657848573247327471324574358468456459645764576580080768967989658970987608769876865005675967596796597468794569784684865382734723758436854879657965976597965979657945794597965987659895679456934858287528787287352838583496974796578568858328429349239594369439954964578574597569385823873737472742735486875989796598765985999358532737473214723875824383868368544");
        b = new BigInt("237574374368436858695796093402992985843688435983285843884369864576834587776216247235843586976457650700958324883584354396945097457004392393219893295093460306450630460430634096934939858285838636457857885387583838468384683486386994597497939495283883483846379759474597865650706435014929358868436845945794597596834852838423848235884326943963969439694395823852838528852843584386934945748328428731872");
        c = a.div(b).quotient;
        assertTrue(c.isZero());
        
        a = new BigInt("237574374368436858695796093402992985843688435983285843884369864576834587776216247235843586976457650700958324883584354396945097457004392393219893295093460306450630460430634096934939858285838636457857885387583838468384683486386994597497939495283883483846379759474597865650706435014929358868436845945794597596834852838423848235884326943963969439694395823852838528852843584386934945748328428731872");
        b = new BigInt("1238128432757432534865843698456945979657848573247327471324574358468456459645764576580080768967989658970987608769876865005675967596796597468794569784684865382734723758436854879657965976597965979657945794597965987659895679456934858287528787287352838583496974796578568858328429349239594369439954964578574597569385823873737472742735486875989796598765985999358532737473214723875824383868368544");
        c = a.div(b).quotient;
        
        assertEquals("191881", c.toString());
    }
    
}
